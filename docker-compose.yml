
services:
  mongo:
    image: mongo:8.0.5
    container_name: mongo_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 7890380
    volumes:
      - mongo_data:/data/db
    ports:
      - "${MONITORA_SAMU_MONGO_PORT}:27017"
    networks:
      - application_network
    restart: always
    command: >
      mongod
      --wiredTigerCacheSizeGB 2
      --quiet
    deploy:
      resources:
        limits:
          cpus: "6"      # até 6 cores
          memory: 6G
        reservations:
          cpus: "4"      # garante 4 cores
          memory: 4G

  mongo-express:
    image: mongo-express:1.0.2-20-alpine3.19
    container_name: mongo-express
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: 7890380
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admingeral
      ME_CONFIG_OPTIONS_MAX_CONNS: 50
    ports:
      - "${MONITORA_SAMU_MONGOEXPRESS_PORT}:8081"
    restart: always
    networks:
      - application_network
    depends_on:
      - mongo

  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper-status-agent
    ports:
      - "${MONITORA_SAMU_ZOOKEEPER_PORT}:2181"
    restart: always
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - application_network

  kafka:
    image: bitnamilegacy/kafka:3.9.0
    container_name: kafka-status-agent
    restart: always
    ports:
      - ${MONITORA_SAMU_KAFKA_PORT}:9092
    environment:
    - KAFKA_CFG_BROKER_ID=1
    - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
    - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
    - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    - KAFKA_CFG_NUM_PARTITIONS=3
    - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - application_network
    volumes:
      - kafka_data:/bitnami/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui-status-agent
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "${MONITORA_SAMU_KAFKAUI_PORT}:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=DataWayBR
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092  # uso interno
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - application_network

  producer:
    build:
      context: .
      dockerfile: src/producer/Dockerfile   # ou Dockerfile-prod se você tiver múltiplos
    container_name: producer
    depends_on:
      - kafka
    env_file:
      - .env
    networks:
      - application_network
    restart: always

  # process-status:
  #   build:
  #     context: .
  #     dockerfile: src/process_status/Dockerfile   # ou Dockerfile-prod se você tiver múltiplos
  #   container_name: process_status
  #   depends_on:
  #     - kafka
  #   env_file:
  #     - .env
  #   networks:
  #     - application_network
  #   restart: always
    
volumes:
  zookeeper_data:
  mongo_data:
  kafka_data:

networks:
  application_network:
    driver: bridge
